using Android.OS;
using Android.Util;
using Com.Layer.Sdk;
using Com.Layer.Sdk.Exceptions;
using Com.Layer.Sdk.Listeners;
using Org.Apache.Http;
using Org.Apache.Http.Client.Methods;
using Org.Apache.Http.Entity;
using Org.Apache.Http.Impl.Client;
using Org.Apache.Http.Util;
using Org.Json;
using System;

namespace Com.Layer.QuickStartAndroid
{
    public class MyAuthenticationListener : Java.Lang.Object, ILayerAuthenticationListener
    {
        private static readonly string TAG = typeof(MyAuthenticationListener).Name;

        private MainActivity main_activity;

        public MyAuthenticationListener(MainActivity ma)
        {
            main_activity = ma;
        }

        //Called after layerClient.authenticate() executes
        //You will need to set up an Authentication Service to take a Layer App ID, User ID, and the
        //nonce to create a Identity Token to pass back to Layer
        //NOTES:
        // - The method will be called when you call "layerClient.authenticate()" or after
        // Authentication
        //   when the Identity Token generated by your Web Services expires (you explicitly need to set
        //   the expiration date in the Token)
        // - The Nonce returned in this function will expire after 10 minutes, after which you will need
        //   to call
        public void OnAuthenticationChallenge(LayerClient client, string nonce)
        {
            string userId = MainActivity.GetUserID();

            //Note: This Layer Authentication Service is for TESTING PURPOSES ONLY
            //When going into production, you will need to create your own web service
            //Check out https://developer.layer.com/docs/guides#authentication for guidance
            new IdentityAsyncTask(client, userId, nonce).Execute();
        }

        //Called when the user has successfully authenticated
        public void OnAuthenticated(LayerClient client, string userID)
        {

            //Start the conversation view after a successful authentication
            Log.Verbose(TAG, "Authentication successful");
            if (main_activity != null)
            {
                main_activity.OnUserAuthenticated();
            }
        }

        //Called when there was a problem authenticating
        //Common causes include a malformed identity token, missing parameters in the identity token,
        // missing
        //or incorrect nonce
        public void OnAuthenticationError(LayerClient layerClient, LayerException e)
        {
            Log.Verbose(TAG, "There was an error authenticating: " + e);
        }

        //Called after the user has been deauthenticated
        public void OnDeauthenticated(LayerClient client)
        {
            Log.Verbose(TAG, "User is deauthenticated.");
        }

        private class IdentityAsyncTask : AsyncTask<Java.Lang.Void, Java.Lang.Void, Java.Lang.Void>
        {
            private readonly LayerClient mClient;
            private readonly string mNonce;
            private readonly string mUserId;

            public IdentityAsyncTask(LayerClient client, string userId, string nonce)
            {
                mClient = client;
                mUserId = userId;
                mNonce = nonce;
            }

            protected override Java.Lang.Void RunInBackground(params Java.Lang.Void[] @params)
            {
                try
                {
                    HttpPost post = new HttpPost("https://layer-identity-provider.herokuapp" +
                            ".com/identity_tokens");
                    post.SetHeader("Content-Type", "application/json");
                    post.SetHeader("Accept", "application/json");

                    JSONObject json = new JSONObject()
                            .Put("app_id", mClient.AppId)
                            .Put("user_id", mUserId)
                            .Put("nonce", mNonce);
                    post.Entity = new StringEntity(json.ToString());

                    IHttpResponse response = (new DefaultHttpClient()).Execute(post);
                    string eit = (new JSONObject(EntityUtils.ToString(response.Entity)))
                            .OptString("identity_token");

                    mClient.AnswerAuthenticationChallenge(eit);

                }
                catch (Exception e)
                {
                    Console.WriteLine(e.ToString());
                }
                return null;
            }
        }
    }
}